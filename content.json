{"posts":[{"title":"Apache設定HSTS","text":"1. 開啟apache headers模組1sudo a2enmod headers 2. 重新啟動apache server 1sudo service apache2 restart 3. 設定/etc/apache2/conf-available/security.conf，加上 header 設定1Header always set Strict-Transport-Security &quot;max-age=31536000;includeSubdomains; preload&quot; 4. 重新載入設定1sudo service apache2 reload 5. 設定完成，可以試著用瀏覽器看一下 response header","link":"/posts/9e57/"},{"title":"htaccess 301 轉址","text":"利用mod_rewrite功能修改如下: 1234567891011# 以下兩行不可省略Options +FollowSymLinksRewriteEngine on# 將index.php 轉到 /RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\\ /.*index\\.php\\ HTTP/RewriteRule ^(.*)index\\.php$ /$1 [R=301,L]# 將沒有www 轉到有 wwwRewriteCond %{HTTP_HOST} ^domain.com [NC]RewriteRule ^(.*)$ http://www.domain.com/$1 [L,R=301]","link":"/posts/934a/"},{"title":"Enable GZIP Compression in Apache","text":"編輯http.conf1vim /etc/httpd/conf/httpd.conf 檢查是否有載入以下模組 123LoadModule deflate_module modules/mod_deflate.soLoadModule headers_module modules/mod_headers.soLoadModule filter_module modules/mod_filter.so 編輯deflate.conf這個檔案預設應該是沒有，所以直接建立檔案 1vim /etc/httpd/conf.d/deflate.conf 複製貼上以下內容 123456789101112131415#Set to gzip all output SetOutputFilter DEFLATE #AddOutputFilterByType DEFLATE text/html text/css text/plain text/xml application/x-javascript application/x-httpd-php #exclude the following file types SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|iso|tar|bz2|sit|rar|png|jpg|gif|jpeg|flv|swf|mp3)$ no-gzip dont-vary #set compression level DeflateCompressionLevel 6 #Handle browser specific compression requirements BrowserMatch ^Mozilla/4 gzip-only-text/html BrowserMatch ^Mozilla/4.0[678] no-gzip BrowserMatch bMSIE !no-gzip !gzip-only-text/html SetEnvIf User-Agent &quot;.*MSIE.*&quot; nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0 說明：SetOutputFilter DEFLATE這行會把所有要輸出的檔案都壓縮，相反的你可以用AddOutputFilterByType DEFLATE後面加上指定的 MIME 類型的檔案，來指定只壓縮某些類型的檔案(這裡註解掉不使用)。 因為我們指定所有輸出的檔案都要壓縮，但其實有些檔案執行壓縮的效率不高，所以要排除，避免耗用太多 CPU，使用SetEnvIfNoCase Request_URI來把這些類型的檔案排除。 接著設定壓縮等級，等級從 1 到 9 級，數字越高，壓縮率越高，但 CPU 耗用的也越大，可以自行調整，預設是 6，不建議設太高，除非你伺服器的 CPU 閒閒沒事做。最後就是針對瀏覽器做個別調整。 重啟Apache Server1service httpd restart","link":"/posts/3e06/"},{"title":"Hexo+GitHub Pages架設個人blog","text":"HexoHexo 是一個基於 Node.js 開發的網誌框架，具有下列幾項特點： 使用Markdown語法 一鍵部署，只需一個指令就能部署到GitHub Pages或Heroku等支援靜態網頁的空間 豐富的外掛套件，可安裝外掛支援Jade, CoffeeScript 輕量級，編輯速度快 支援多樣Theme 1. 前置作業安裝Node.jsNode.js官網下載安裝，安裝後用CMD檢查是否安裝成功 1node -v 1npm -v 安裝hexo-deployer-git1npm install hexo-deployer-git --save 安裝Hexo1npm install hexo-cli -g 2. Hexo環境建置初始化Hexo1hexo init [folder] 安裝所需套件切換到初始化完的Hexo資料夾，執行下列指令，安裝所需npm套件： 1npm install npm會根據 package.json 中設定，載入所有專案中所需套件模組 初始化與安裝完成後，進入資料夾會看到以下檔案和資料夾 12345678.+-- _config.yml+-- package.json+-- scaffolds+-- source| +-- _drafts| +-- _posts+-- themes 3. Hexo指令清除靜態檔案及快取(clean)清除db.json及public資料夾中已產生的靜態檔案 12hexo cleanhexo cl #簡寫 產生靜態檔案(generate)產生靜態檔案。此指令會建立public資料夾，所有靜態檔案都在此資料夾中 12hexo generatehexo g #簡寫 啟動伺服器(server)啟動Hexo伺服器 12hexo serverhexo s #簡寫 4. 將網站部署到GitHub新增Repository將repository命名為username.github.io (username請改為自己的帳號名稱)，下方設定都預設不需更動，最後按下Create repository按鈕。 修改_config.yml中的deploy設定 此處 _config.yml 是hexo根目錄的檔案，不是themes下的。 _config.yml 拉到最下方，可看到 deploy 區塊，修改內容如下： 1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master deploy到GitHub使用下面指令將檔案deploy到GitHub： 12hexo deployhexo d #簡寫 或是先清除快取 1hexo cl &amp;&amp; hexo d -g 5. 參考資料【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌","link":"/posts/1663/"},{"title":"PsTools之PsExec執行遠端電腦上的指令或批次檔","text":"PsExec 是PsTool中的一項工具，可讓我們在本地端執行遠端電腦的程式，甚至遠端電腦無該程式，也可直接從本地端下參數，啟動時複製到遠端電腦直接執行。 語法1psexec [\\\\computer[,computer2[,...] | @file]][-u user [-p psswd]][-n s][-r servicename][-h][-l][-s|-e][-x][-i [session]][-c [-f|-v]][-w directory][-d][-&lt;priority&gt;][-a n,n,...][-verbose] cmd [arguments] 參數 Parameter Description -a 以逗號分隔應用程式可執行檔處理器，其中 1 是最低的編號 CPU。 例如，若要在 CPU 2 和 CPU 4 上執行應用程式，請輸入：「-a 2，4」 -c 將指定的可執行檔案複製到遠端系統以供執行。 如果您省略此選項，應用程式必須位於遠端系統上的系統路徑中。 -d 請勿等候進程終止 (非互動式) 。 -e 不會載入指定的帳號設定檔。 -f 即使檔案已存在於遠端系統上，仍複製指定的程式。 -i 執行程式，使其與遠端系統上指定會話的桌面互動。 如果未指定任何會話，進程就會在主控台會話中執行。 嘗試使用重新導向的標準 IO) ，以互動方式 (執行主控台應用程式時 ，需要 此旗標。 -h 如果目標系統是 Vista 或更高版本，請讓進程在有帳戶提升許可權的權杖的情況下執行。 -l 以有限使用者身分執行程式 (移除 Administrators 群組，並只允許指派給 Users 群組的許可權) 。 在 Windows Vista 上，進程會以低完整性執行。 -n 指定連線到遠端電腦的秒數逾時。 -p 指定使用者名稱的選擇性密碼。 如果您省略此專案，系統會提示您輸入隱藏的密碼。 -r 指定要建立或互動的遠端服務名稱。 -s 在系統帳戶中執行遠端進程。 -u 指定登入遠端電腦的選擇性使用者名稱。 -v 只有在指定檔案的版本號碼較高或比遠端系統上的版本更新時，才複製指定的檔案。 -w 設定相對於遠端電腦) 的程式工作目錄 (。 -x 僅) 在 Winlogon 安全桌面上顯示 UI (本機系統。 -priority 指定 -low、-belownormal、-abovenormal、-high 或 -realtime，以不同的優先順序執行進程。 使用 -background 在 Vista 上以低記憶體和 I/O 優先順序執行。 computer 指示 PsExec 在指定的遠端電腦或電腦上執行應用程式。 如果您省略電腦名稱稱，PsExec 會在本機系統上執行應用程式，而且如果您指定萬用字元 (\\*) ，PsExec 會在目前網域的所有電腦上執行 命令。 @file PsExec 會在檔案中列出的每部電腦上執行 命令。 cmd 要執行的應用程式名稱。 arguments 要傳遞 (的引數請注意，檔案路徑必須是目標系統上的絕對路徑) 。 -accepteula 此旗標會隱藏授權對話方塊的顯示。 其他PsTools工具 工具 描述 PsExec 可讓您在任何使用者內容中執行處理序。 PsFile 顯示系統上以遠端方式開啟的檔案。 PsGetSid 顯示電腦或使用者的 Windows 安全性識別碼 (SID)。 PsInfo 列出有關 Windows 系統的資訊。 PsKill 根據名稱或處理序識別碼刪除處理序。 PsList 列出有關執行中處理序的詳細資訊。 PsLoggedOn 顯示所有本機登入使用者，以及遠端資源共用使用者。 PsLogList 傾印 Windows 事件記錄檔記錄。 PsPasswd 變更使用者帳戶密碼。 PsService 檢視和控制 Windows 服務。 PsShutdown 讓電腦關閉、重新啟動、休眠或暫止。 PsSuspend 暫止執行中的處理序。 取得最高SYSTEM權限以系統管理員身分執行CMD(命令提示字元) 執行指令 1psexec.exe -s -i cmd.exe 應該就會彈出另一個視窗成功拿到 systemroot 的cmd.exe可以下指令whoami確認，身分會是nt authority\\system你就成功取得了傳說中的最高system權限超越administrator的權限 Run local bat file on a remote machine1psexec \\\\remotemachine -u remoteuser -i -d cmd -c localdisk:\\folder\\batchfile.bat -c will copy from local path","link":"/posts/e485/"},{"title":"(MSSQL)Reducing LDF file size","text":"1. 查詢’DBNAME_log’實際名稱1SELECT * FROM SYS.DATABASE_FILES 2. 將資料庫改成簡單(simple)模式1ALTER DATABASE DBNAME SET RECOVERY SIMPLE 3. SHRINKFILE123USE *DBNAME*GODBCC SHRINKFILE('DBNAME_log',2) SHRINKFILE語法12345678DBCC SHRINKFILE ( { file_name | file_id } { [ , EMPTYFILE ] | [ [ , target_size ] [ , { NOTRUNCATE | TRUNCATEONLY } ] ] } ) [ WITH NO_INFOMSGS ] 4. 將資料庫改回完整(FULL) 模式1ALTER DATABASE DBNAME SET RECOVERY FULL","link":"/posts/7083/"},{"title":"(MSSQL)查詢DB所有USER權限","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112--List all access provisioned to a sql user or windows user/group directly SELECT [UserName] = CASE princ.[type] WHEN 'S' THEN princ.[name] WHEN 'U' THEN ulogin.[name] COLLATE Latin1_General_CI_AI END, [UserType] = CASE princ.[type] WHEN 'S' THEN 'SQL User' WHEN 'U' THEN 'Windows User' END, [DatabaseUserName] = princ.[name], [Role] = null, [PermissionType] = perm.[permission_name], [PermissionState] = perm.[state_desc], [ObjectType] = obj.type_desc,--perm.[class_desc], [ObjectName] = OBJECT_NAME(perm.major_id), [ColumnName] = col.[name]FROM --database user sys.database_principals princ LEFT JOIN --Login accounts sys.login_token ulogin on princ.[sid] = ulogin.[sid]LEFT JOIN --Permissions sys.database_permissions perm ON perm.[grantee_principal_id] = princ.[principal_id]LEFT JOIN --Table columns sys.columns col ON col.[object_id] = perm.major_id AND col.[column_id] = perm.[minor_id]LEFT JOIN sys.objects obj ON perm.[major_id] = obj.[object_id]WHERE princ.[type] in ('S','U')UNION--List all access provisioned to a sql user or windows user/group through a database or application roleSELECT [UserName] = CASE memberprinc.[type] WHEN 'S' THEN memberprinc.[name] WHEN 'U' THEN ulogin.[name] COLLATE Latin1_General_CI_AI END, [UserType] = CASE memberprinc.[type] WHEN 'S' THEN 'SQL User' WHEN 'U' THEN 'Windows User' END, [DatabaseUserName] = memberprinc.[name], [Role] = roleprinc.[name], [PermissionType] = perm.[permission_name], [PermissionState] = perm.[state_desc], [ObjectType] = obj.type_desc,--perm.[class_desc], [ObjectName] = OBJECT_NAME(perm.major_id), [ColumnName] = col.[name]FROM --Role/member associations sys.database_role_members membersJOIN --Roles sys.database_principals roleprinc ON roleprinc.[principal_id] = members.[role_principal_id]JOIN --Role members (database users) sys.database_principals memberprinc ON memberprinc.[principal_id] = members.[member_principal_id]LEFT JOIN --Login accounts sys.login_token ulogin on memberprinc.[sid] = ulogin.[sid]LEFT JOIN --Permissions sys.database_permissions perm ON perm.[grantee_principal_id] = roleprinc.[principal_id]LEFT JOIN --Table columns sys.columns col on col.[object_id] = perm.major_id AND col.[column_id] = perm.[minor_id]LEFT JOIN sys.objects obj ON perm.[major_id] = obj.[object_id]UNION--List all access provisioned to the public role, which everyone gets by defaultSELECT [UserName] = '{All Users}', [UserType] = '{All Users}', [DatabaseUserName] = '{All Users}', [Role] = roleprinc.[name], [PermissionType] = perm.[permission_name], [PermissionState] = perm.[state_desc], [ObjectType] = obj.type_desc,--perm.[class_desc], [ObjectName] = OBJECT_NAME(perm.major_id), [ColumnName] = col.[name]FROM --Roles sys.database_principals roleprincLEFT JOIN --Role permissions sys.database_permissions perm ON perm.[grantee_principal_id] = roleprinc.[principal_id]LEFT JOIN --Table columns sys.columns col on col.[object_id] = perm.major_id AND col.[column_id] = perm.[minor_id] JOIN --All objects sys.objects obj ON obj.[object_id] = perm.[major_id]WHERE --Only roles roleprinc.[type] = 'R' AND --Only public role roleprinc.[name] = 'public' AND --Only objects of ours, not the MS objects obj.is_ms_shipped = 0ORDER BY princ.[Name], OBJECT_NAME(perm.major_id), col.[name], perm.[permission_name], perm.[state_desc], obj.type_desc--perm.[class_desc]","link":"/posts/123d/"},{"title":"(PowerShell)壓縮&#x2F;解壓縮","text":"壓縮/解壓縮 指令 說明 Compress-Archive 壓縮 Expand-Archive 解壓縮 2個指令的常用參數相似，見以下說明。 壓縮整個資料夾12# 建立 Zip 壓縮檔Compress-Archive -Path C:\\Folder -DestinationPath C:\\Archive.zip 壓縮多個檔案12# 壓縮多個檔案Compress-Archive -Path C:\\Folder\\file.docx, C:\\Folder\\picture.png -DestinationPath C:\\Archive.zip 更新壓縮檔(Update)/強制覆蓋(Force)12# 更新壓縮檔Compress-Archive -Path C:\\Folder\\*.txt -Update -DestinationPath C:\\Archive.zip 12# 強制覆蓋Compress-Archive -Path C:\\Folder\\*.txt -Force -DestinationPath C:\\Archive.zip 指定壓縮層級(CompressionLevel) level description Fastest 最快速方式壓縮。(檔案較大) NoCompression 不壓縮 Optimal 最佳化壓縮，此方式為預設值。(檔案較小) 若要減少壓縮時間，可以Fastest壓縮層級進行壓縮 1Compress-Archive -Path C:\\Folder -CompressionLevel Fastest -DestinationPath C:\\Archive.zip 指名檔案名稱(LiteralPath)大部分狀況下使用-Path可順利進行壓縮，若遇檔案名稱含有特殊字元或萬用字元等狀況，無法順利壓縮時，可改用-LiteralPath參數 1Compress-Archive -LiteralPath D:\\StrangeFileName.jpg -DestinationPath D:\\MyArchive.zip 加密壓縮(7-Zip)powershell內建的Compress-Archive指令並無加密功能，改用7-Zip可在壓縮時加上密碼。 12345678910111213$7zipPath = &quot;$env:ProgramFiles\\7-Zip\\7z.exe&quot;if (-not (Test-Path -Path $7zipPath -PathType Leaf)) { throw &quot;7 zip file '$7zipPath' not found&quot;}Set-Alias 7zip $7zipPath$Source = &quot;c:\\BackupFrom\\backMeUp.txt&quot;$Target = &quot;c:\\BackupFolder\\backup.zip&quot;$pass = [System.Web.Security.Membership]::GeneratePassword(10,2)7zip a -mx=9 $Target $Source -p$pass Exit Codes from 7-Zip Code Meaning 0 No error 1 Warning (Non fatal error(s)). For example, one or more files were locked by some other application, so they were not compressed. 2 Fatal error 7 Command line error 8 Not enough memory for operation 255 User stopped the process","link":"/posts/7092/"},{"title":"Django架設在Windows IIS上","text":"1. 環境準備1.1 Python 3.x安裝至Python下載頁下載Python 3.x並安裝 1.2 Upgrade PIP1python -m pip install --upgrade pip 1.3 安裝所需套件1pip install -r requirements.txt 1.4 安裝ODBC Driver for SQL Server安裝ODBC Driver for SQL Server (需視SQL Server版本選擇對應的ODBC Driver) 1.5 安裝IIS CGI模組 2. 安裝wfastcgiInstall wfastcgi 1pip install wfastcgi Enableing (enable wfastcgi in the IIS configuration)** 1wfastcgi-enable enable後會產生以下訊息，記錄下來，之後IIS設定需要 已將設定變更套用至設定認可路徑 “MACHINE/WEBROOT/APPHOST” 中 “MACHINE/WEBROOT/APPHOST” 的區段 “system.webServer/fastCgi” 。“C:\\Users\\XXX\\Anaconda3\\envs\\django\\python.exe|C:\\Users\\XXX\\Anaconda3\\envs\\django\\lib\\site-packages\\wfastcgi.py” can now be used as a FastCGI script processor 3. IIS設定新增網站 IIS首頁「站台」按右鍵 → 新增網站 輸入網站設定 4. 設定「處理常式對應」選擇剛設定完的站台，點選「處理常式對應」 點擊「新增模組對應」，設定新增模組對應： 要求路徑：* 模組：FastCgiModule 執行檔：上面wfastcgi-enable步驟所產生的訊息 名稱：模組對應名稱(whatever) 設定「要求限制」 取消勾選「只有當要求對應到下列項目時才啟動處理常式」 5. 設置FastCGI設定回IIS首頁，點選「FastCGI設定」 點選剛設定的資料，點右上角「編輯」 編輯FastCGI應用程式，設定環境變數 Name Value WSGI_HANDLER django.core.wsgi.get_wsgi_application() PYTHONPATH Django Project路徑 DJANGO_SETTINGS_MODULE (Django App Name).settings 6. 設置靜態資源(static resource)確認settings.py中STATIC_ROOT設定 123456789# settings.py...STATIC_URL = '/static/'STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'),)STATIC_ROOT = os.path.join(BASE_DIR, '**staticfiles**')# 靜態資源資料夾名為staticfiles... python manage.py collectstatic在執行時，Django會將靜態文件收集到STATIC_ROOT中。 新增一個虛擬目錄映射到STATIC_ROOT所設定的目錄 最後在站台設定應類似以下內容:","link":"/posts/9a47/"},{"title":"(Django)取得目前URL&#x2F;app_name","text":"12345678from django.urls import resolvedef get_current_url(request): ... current_url = resolve(request.path_info).url_name app_name = resolve(request.path_info).app_name print(&quot;current_url: %s&quot; % current_url) print(&quot;app_name: %s&quot; % app_name) 在template取得app_name 1{{request.resolver_match.app_name}}","link":"/posts/f592/"},{"title":"(Django)資料庫內密碼欄位加密 - make_password","text":"import make_password use make_password() function 1234567from django.contrib.auth.hashers import make_passwordclass MyView(CreateView): ... def form_valid(self, form): pwd = form.cleaned_data['password'] pwd = make_password(pwd)","link":"/posts/ab7b/"},{"title":"hexo建立404頁面","text":"方法1 : 使用hexo產生404頁面1. 用hexo建立一個404的檔案1hexo new page 404 會產生一個index.md檔在source/404/下 2. 編輯404檔案1234567891011---title: 404date: 2023-04-24 10:40:33toc: falsecomments: falselayout: falsepermalink: /404.html---(404頁面內容)... header處一定要加上permalink: /404.html，若無設定無法正確出現404頁面。 toc: false不顯示目錄(table of contents) comments: false 不開啟文章留言功能 layout: true/false 是否套用layout，若為true，則套用原網站佈局，若為false，則為單獨的一個頁面 方法2 : 使用一般html檔自己寫一個404.html並放在themes/source資料夾底下即可。 GitHub Page等免費靜態網站服務，預設會抓source下的404.html當作404頁面。 &amp;nbsp; 參考資料試著學 Hexo - SEO 篇 - 新增你的 404 頁面Hexo 設定 404 頁面","link":"/posts/bd35/"},{"title":"Hexo icarus theme變更頁面欄位寬度","text":"環境 item version hexo 6.2.0 hexo-theme-icarus 5.1.0 修改layout欄位寬度如要改變頁面的寬度，編輯&lt;icarus_directory&gt;/include/style/responsive.styl這個樣式文件。此文件定義了不同屏幕尺寸下的頁面容器寬度。 12345678910111213141516171819202122232425262728293031323334**// &lt;icarus_directory&gt;/include/style/responsive.styl**/* --------------------------------- * Responsive Layout * --------------------------------- */+widescreen() .is-1-column .container, .is-2-column .container max-width: $desktop - 2 * $gap width: $desktop - 2 * $gap+fullhd() .is-2-column .container max-width: $widescreen - 2 * $gap width: $widescreen - 2 * $gap .is-1-column .container max-width: $desktop - 2 * $gap width: $desktop - 2 * $gap+tablet() .is-sticky position: -webkit-sticky position: sticky top: 1.5rem z-index: 99 .column-main, .column-left, .column-right, .column-right-shadow &amp;.is-sticky top: .75rem align-self: flex-start+mobile() .section padding: 1.5rem 1rem 假設要使寬螢幕(widescreen)環境下主內容欄更寬，可編輯&lt;icarus_directory&gt;/layout/layout.jsx。 12345678&lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1,- 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2,+ 'is-8-tablet is-8-desktop is-9-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 如要改變widgets寬度，編輯&lt;icarus_directory&gt;/layout/common/widgets.jsx。 1234567function getColumnSizeClass(columnCount) { switch (columnCount) { case 2:- return 'is-4-tablet is-4-desktop is-4-widescreen';+ return 'is-4-tablet is-4-desktop is-3-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; 注意主內容欄(layout.jsx)和widgets欄(widgets.jsx)中的數字，在相同屏幕尺寸下相加必須等於12。如上面例子，layout.jsx中設定is-9-widescreen，在widgets.jsx中widescreen設定需設定為is-3-widescreen。 (9+3=12)","link":"/posts/7848/"},{"title":"IIS透過Url Rewrite Module自動導向https","text":"1. 確認URL Rewrite Module是否安裝若沒看到URL Rewrite圖示，表示未安裝。 1.1. 安裝Web Platform Installer按右方「取得新的網頁平台元」，會開啟瀏覽器導到Web Platform Installer下載頁，點擊下載安裝。 安裝完成後，可在程式集中找到 1.2. 開啟Web Platform Installer，安裝URL Rewrite Module右上方搜尋列輸入「url rewrite」，按[Enter]。可在搜尋結果看到URL Rewrite 2.0，選取後點擊右下角「安裝」按鈕，即會安裝此模組至IIS。 2. 建立URL Rewrite規則2.1. 新建規則 → 空白規則 → 確定 2.2. 編輯輸入規則 - 「比對URL」區塊 名稱(N)：自行輸入規則名稱 要求的URL(R)：符合模式 使用(S)：規則運算式 模式(T)：**(.)* 2.3. 編輯輸入規則 - 「條件」區塊 條件輸入(C)：**{HTTPS}** 檢查輸入字串是否為：符合模式 模式(T)：^OFF$ 2.4. 編輯輸入規則 - 「動作」區塊 動作類型(Y)：重新導向 重新導向URL：https://{HTTP_HOST}{REQUEST_URI} 重新導向類型：永久(301) 3. web.config上面在IIS中URL Rewrite Module的操作，等同於在網站web.config中的&lt;system.webServer&gt;加入Rewrite Rules。 123456789101112131415&lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=&quot;https force redirect&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;(.*)&quot; /&gt; &lt;conditions&gt; &lt;add input=&quot;{HTTPS}&quot; pattern=&quot;^OFF$&quot; /&gt; &lt;/conditions&gt; &lt;action type=&quot;Redirect&quot; url=&quot;https://{HTTP_HOST}{REQUEST_URI}&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt;&lt;/configuration&gt;","link":"/posts/964/"},{"title":"Hexo icarus theme更改字型","text":"Hexo ICARUS theme如何修改預設字型 環境Hexo版本：6.2.0ICARUS版本：5.1.0 如果跟我一樣，ICARUS預設的字型看不太習慣，想更改字型，方法請看下面介紹。 找到檔案base.styl，位置在hexo資料夾/themes/icarus/include/style/base.styl 在檔案裡搜尋family-sans-serif，這邊就是ICARUS的預設字型設定。 123456# /Hexo/themes/icarus/include/style/base.styl...$family-sans-serif ?= Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif$family-code ?= 'Source Code Pro', monospace, 'Microsoft YaHei'... 兩個字型分別代表： 12family-sans-serif: 正文字型family-code: 代碼區字型 例如我想把字型改為微軟正黑體，就將Microsoft JhengHei加到最前面。 123456# /Hexo/themes/icarus/include/style/base.styl...$family-sans-serif ?= 'Microsoft JhengHei', Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif$family-code ?= 'Source Code Pro', monospace, 'Microsoft YaHei'... 重新啟動Hexo後，版面的字型就會變成微軟正黑體了。","link":"/posts/1fa/"},{"title":"(Linux)系統磁碟&#x2F;dev&#x2F;vda1空間100%佔滿解決方法","text":"1. 先查看磁碟狀況1df -h 2. 進入/dev/vda1掛載的目錄/，查看底層目錄大小12cd /du -sh * 觀察哪個目錄佔用較多磁碟空間，進入該目錄，重覆上面動作，一層一層往下去找到磁碟佔用較大的檔案，再謹慎刪除不必要的檔案。 之後再看一次磁碟空間，空間就已先釋放一些出來了。 我這邊後來是先刪除一些建立日期已超過一年的本機備份檔，先讓使用者能作業，再慢慢清理一些空間出來。","link":"/posts/8a5d/"},{"title":"Markdown基礎語法整理","text":"1. 標題使用atx形式atx形式是使用#號，在行首插入1到6個#，分別對應標題1到6階，如： 123456# H1## H2### H3#### H4##### H5###### H6 顯示結果如下： 使用Setext形式Setext形式是用=(第一級標題)和-(第二級標題)符號來表式，如： 12345A First Level Header====================A Second Level Header--------------------- 顯示結果如下： 任何數量的=和-效果都相同，如： 12345678910&lt;!-- 下面三行輸出效果都一樣 --&gt;Second Level Header-------------------Second Level Header-----------Second Level Header----- 顯示結果如下： 2. 段落字型格式字體Markdown使用星號(*)和底線(_)作為標記符號，一個符號為包圍為斜體，兩個符號包圍為粗體，三個符號包圍為斜體加粗體，如： 123456*斜體文字*_斜體文字_**粗體文字**__粗體文字__***粗斜體文字***___粗斜體文字___ 顯示結果如下： 分隔線可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西，但可接受空白。 12345***----_____* * * *- - - - - 顯示結果如下： 刪除線可在文字前後加上波浪線~~。 1~~This is a dividing line.~~ 顯示結果如下：This is a dividing line. 底線底線可用HTML的&lt;u&gt;標籤來實現。 1&lt;u&gt;This is a underline.&lt;/u&gt; 顯示結果如下：This is a underline. 程式碼可以用反引號(`)包起來，例如： 1使用`print()`函式來輸出 顯示結果如下： 3. 註腳(footnote)可使用以下語法來寫註腳： 123[^註腳標籤][^註腳標籤]:註腳內容 範例： 12345Google[^Google]Yahoo[^Yahoo][^Google]: https://www.google.com[^Yahoo]: https://www.yahoo.com 顯示結果如下： 4. 註解可使用HTML的註解標籤&lt;!--與--&gt;將要註解的文字包起來。 123這不是註解&lt;!-- 這是註解 --&gt; 註解的部分將不會看到，顯示結果如下： 5. 清單列表無序清單無序清單使用星號(*)、加號(+)或減號(-)作為標記。 123456* 無序清單1* 無序清單2 + 無序清單2-1 + 無序清單2-2 - 無序清單2-2-1 顯示結果如下： 有序清單有序清單使用數字+句號(.)+空白來表示。 12341. 有序清單12. 有序清單23. 有序清單34. 有序清單4 或是 12341. 有序清單11. 有序清單21. 有序清單31. 有序清單4 或甚至是 12341. 有序清單15. 有序清單21. 有序清單33. 有序清單4 輸出的結果都是： 但需注意，清單標記上使用的數字，雖然並不會影響輸出的數字順序，但會以第一個數字往後自動排序。 12343. 有序清單15. 有序清單21. 有序清單33. 有序清單4 輸出的結果會是： 6. 引言引言區塊是在段落開頭用 &gt; + 空白來表示，例如： 123&gt; 第一層引言區塊&gt; &gt; 第二層引言區塊&gt; &gt; &gt; 第三層引言區塊 顯示結果如下： 7. 超連結簡易超連結在網址前後加上&lt;和&gt;符號，例如： 1&lt;https://www.google.com&gt; 顯示如下： https://www.google.com 超連結使用[ + 超連結文字 + ] + ( + 超連結網址 + )此語法，例如： 1[這是Google超連結](https://www.google.com) 顯示如下： 這是Google超連結 8. 圖片語法與超連結類似，前面再加上一個驚嘆號(!)，語法如下： 1![圖片Alt](圖片連結 &quot;圖片title&quot;) 例如： 1![圖片](https://picsum.photos/300/200) 9. 圖片超連結語法如下： 1[![圖片Alt](圖片網址)](連結網址) 例如： 1[![圖片](https://picsum.photos/300/200 &quot;點我&quot;)](https://chingsoo.github.io) 10. 程式碼區塊語法： 123```程式類型程式碼``` 例如： 12345```javascript$(document).ready(function () { alert('Hello World');});``` 顯示結果如下： 程式碼區塊支援的語言種類 Grammar index Linguist - languages.yml 11. 表格使用|來分隔不同的單元格，使用-來分隔標題和表格內容，-的數量不影響輸出的結果。表格對齊方式： - 預設值 :- 標題和內容置左 :-: 標題和內容置中 -: 標題和內容置右 12345| 欄位1 | 欄位2 | 欄位3 | 欄位4|| --- | :--- | :---: | ---: || 預設 | 置左 | 置中 | 置右 || AA | BB | CC | DD || AAAAA | BBBBBB | CCCCCC | DDDDDD | 顯示結果如下： 12. 勾選框 (CheckBox)勾選的項目以x標記，大小寫都可以。 123- [x] 選項1- [ ] 選項2- [X] 選項3 顯示結果如下： 13. 跳脫字元Markdown可以利用反斜線\\來插入一些在語法中有其他意義的符號，如： 12**這是粗體文字**\\*\\*前後加兩個星號，不是粗體文字\\*\\* 顯示結果如下： 以下符號可用跳脫字元來Markdown支援在下面這些符號前面加上反斜線來幫助插入普通的符號： 123456789101112\\ 反斜線` 反引號* 星號_ 底線{} 大括號[] 方括號() 括號# 井字號+ 加號- 減號. 英文句點! 驚嘆號 參考資料 markdown.tw GitHub Flavored Markdown Spec","link":"/posts/6791/"},{"title":"(MSSQL)查詢table&#x2F;view欄位DATATYPE","text":"透過SYS.COLUMNS JOIN SYS.TYPES查詢12345678910SELECT c.name, t.name, c.max_length, c.precision, c.scaleFROM SYS.COLUMNS c JOIN SYS.TYPES t ON t.user_type_id = c.user_type_id AND t.system_type_id = c.system_type_idWHERE object_id = OBJECT_ID('TABLENAME/VIEWNAME') 透過INFORMATION_SCHEMA.COLUMNS查詢123SELECT *FROM INFORMATION_SCHEMA.COLUMNSWHERE TABLE_NAME = 'TABLENAME/VIEWNAME'","link":"/posts/ad96/"},{"title":"(MSSQL)datetime處理","text":"&amp;nbsp; 現在時間1SELECT GETDATE() 取得現在年、月、日123SELECT YEAR(GETDATE())SELECT MONTH(GETDATE())SELECT DAY(GETDATE()) DATEPART Datepart Description year, yyyy, yy 年 month, mm, m 月 day, dd, d 日 hour, hh 時 minute, n 分 second, ss, s 秒 millisecond, ms 毫秒 microsecond, mcs 微秒 nanosecond, ns 毫微秒 quarter, qq, q 季 dayofyear, dy, y 一年中的第幾天 week, wk, ww 一年中的第幾週 weekday, dw 星期幾 TZoffset, tz 時區 time zone offset，單位是分鐘 12345678910111213141516171819SELECT DATEPART(yy,'2010-10-30 12:20:30')-- 2010SELECT DATEPART(m,'2010-10-30 12:20:30')-- 10SELECT DATEPART(d,'2010-10-30 12:20:30')-- 30SELECT DATEPART(hh,'2010-10-30 12:20:30')-- 12SELECT DATEPART(mi,'2010-10-30 12:20:30')-- 20SELECT DATEPART(ww,'2010-10-30 12:20:30')-- 44SELECT DATEPART(q,'2010-10-30 12:20:30')-- 4-- 注意，y不是年，是一年中的第幾天SELECT DATEPART(y,'2010-10-30 12:20:30')-- 303 12345678910111213141516171819202122SELECT convert(varchar, getdate(), 100) - mon dd yyyy hh:mmAM (or PM)SELECT convert(varchar, getdate(), 101) - mm/dd/yyyySELECT convert(varchar, getdate(), 102) - yyyy.mm.ddSELECT convert(varchar, getdate(), 103) - dd/mm/yyyySELECT convert(varchar, getdate(), 104) - dd.mm.yyyySELECT convert(varchar, getdate(), 105) - dd-mm-yyyySELECT convert(varchar, getdate(), 106) - dd mon yyyySELECT convert(varchar, getdate(), 107) - mon dd, yyyySELECT convert(varchar, getdate(), 108) - hh:mm:ssSELECT convert(varchar, getdate(), 109) - mon dd yyyy hh:mm:ss:mmmAM (or PM) SELECT convert(varchar, getdate(), 110) - mm-dd-yyyySELECT convert(varchar, getdate(), 111) - yyyy/mm/ddSELECT convert(varchar, getdate(), 112) - yyyymmddSELECT convert(varchar, getdate(), 113) - dd mon yyyy hh:mm:ss:mmmSELECT convert(varchar, getdate(), 114) - hh:mm:ss:mmm(24h)SELECT convert(varchar, getdate(), 120) - yyyy-mm-dd hh:mm:ss(24h)SELECT convert(varchar, getdate(), 121) - yyyy-mm-dd hh:mm:ss.mmmSELECT convert(varchar, getdate(), 126) - yyyy-mm-ddThh:mm:ss.mmmSELECT replace(convert(varchar, getdate(), 111), -/-, - -) - yyyy mm ddSELECT convert(varchar(7), getdate(), 126) - yyyy-mmSELECT right(convert(varchar, getdate(), 106), 8) - mon yyyySELECT format(getdate(),'yyyyMMddHHmmssffff') -- 2014-04-17 13:55:12 =&gt; 20140417135512 DATEDIFFDATEDIFF SyntaxDATEDIFF是計算兩個日期間的間隔，傳回帶正負號的整數. 1DATEDIFF(datepart, startdate, enddate) datepart：startdate 和 enddate 之間差異的單位。datepart值不能在變數中指定，也不能是以引號括住的字串 (例如 'month')。startdate：開始日期enddate：結束日期 datepart Arguments datepart name datepart 縮寫 year yy, yyyy quarter qq, q month mm, m dayofyear dy day dd, d week wk, ww hour hh minute mi, n second ss, s millisecond ms microsecond mcs nanosecond ns startdate/enddate 可解析格式 date datetime datetimeoffset datetime2 smalldatetime time DATEADDDATEADD會將 數值 (帶正負號的整數) 加入輸入日期的datepart，並傳回修改的日期/時間值。 DATEADD Syntax1DATEADD (datepart , number , date ) datepart：startdate 和 enddate 之間差異的單位number：指定的數值(帶正負號的整數)date：要被加上的原始日期 datepart arguments同 DATEDIFF arguments date 可解析格式同 DATEDIFF startdate/enddate 可解析格式 DATEADD/DATEDIFF綜合應用Last Day of Previous Month 1SELECT DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)) AS LastDay_PreviousMonth Last Day of Current Month 1SELECT DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE())+1,0)) AS LastDay_CurrentMonth Last Day of Next Month 1SELECT DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE())+2,0)) AS LastDay_NextMonth","link":"/posts/f8/"},{"title":"(MSSQL)INSERT INTO SELECT&#x2F;SELECT INTO FROM","text":"INSERT INTO SELECT語法1INSERT INTO TABLE2(COL1, COL2,...) SELECT COL1, COL2,... FROM TABLE1 WHERE CONDITION INSERT INTO SELECT 語法從一個表複製資料，然後把數據插入到一個已存在的表中。目標表中任何已存在的行都不會受影響。 SELECT INTO FROM語法1SELECT COL1, COL2, ... INTO TABLE2 FROM TABLE1 SELECT INTO 語法從一個表複製資料，然後把資料插入到另一個新表中。(新資料表原本不存在，會創建一個新資料表)","link":"/posts/3fa7/"},{"title":"(MSSQL)檢查&#x2F;重置自動編號(Identity)欄位值-DBCC CHECKIDENT","text":"Syntax12345DBCC CHECKIDENT( 'table_name' [ , { NORESEED | { RESEED [ , new_reseed_value ] } } ])[WITH NO_INFOMSGS] table_name： 這是要檢查目前識別值之資料表的名稱。 指定的資料表必須包含識別欄位。 資料表名稱必須遵照識別碼的規則。 兩個或三個部分的名稱必須加以分隔，例如 ‘Person.AddressType’ 或 [Person.AddressType]。 NORESEED： 不變更目前的識別值。 RESEED： 變更目前的識別值。 new_reseed_value： 自動編號(Identity)欄位新值。 WITH NO_INFOMSGS： 隱藏所有參考訊息。 Examples查看且如有必要更正目前identity值1234USE DBNAME; GODBCC CHECKIDENT ('TABLENAME');GO 查看目前identity值1234USE DBNAME;GODBCC CHECKIDENT ('TABLENAME', NORESEED);GO 設定新identity值1234USE DBNAME;GODBCC CHECKIDENT ('TABLENAME', RESEED, new_value);GO","link":"/posts/a00b/"},{"title":"(MSSQL)尋找含有特定欄位名稱的Tables&#x2F;Views","text":"搜尋含有特定欄位名稱的Tables1234567-- Search tables with specified column nameSELECT c.name AS 'ColumnName', t.name AS 'TableName' FROM sys.columns c JOIN sys.tables t ON c.object_id = t.object_id WHERE c.name LIKE '%MyName%' ORDER BY TableName ,ColumnName; 搜尋含有特定欄位名稱的Tables &amp; Views123456-- Search tables &amp; views with specified column nameSELECT COLUMN_NAME AS 'ColumnName', TABLE_NAME AS 'TableName' FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME LIKE '%MyName%' ORDER BY TableName, ColumnName;","link":"/posts/a578/"},{"title":"(MSSQL)資料轉置PIVOT(Row2Col)","text":"Syntax1234567891011121314151617SELECT &lt;non-pivoted column&gt;, [first pivoted column] AS &lt;column name&gt;, [second pivoted column] AS &lt;column name&gt;, ... [last pivoted column] AS &lt;column name&gt; FROM (&lt;SELECT query that produces the data&gt;) AS &lt;alias for the source query&gt; PIVOT ( &lt;aggregation function&gt;(&lt;column being aggregated&gt;) FOR [&lt;column that contains the values that will become column headers&gt;] IN ( [first pivoted column], [second pivoted column], ... [last pivoted column]) ) AS &lt;alias for the pivot table&gt; &lt;optional ORDER BY clause&gt;; 案例資料表 Customer_Order 內容如下： 客戶每月訂單總數123456789101112SELECT YEAR(pvt.OrderDate) AS [Year], MONTH(pvt.OrderDate) AS [MONTH], SUM(pvt.CustomerA) AS CustomerA, SUM(pvt.CustomerB) AS CustomerBFROM ( SELECT OrderID, Customer, OrderDate, Amount FROM Customer_Order) pPIVOT( (OrderID) FOR Customer IN ([CustomerA], [CustomerB])) AS pvtGROUP BY YEAR(OrderDate), MONTH(OrderDate)ORDER BY YEAR(pvt.OrderDate), MONTH(pvt.OrderDate) 客戶每月下單總量12345678910SELECT [YEAR],[MONTH],ISNULL([CustomerA],0) AS CustomerA, ISNULL([CustomerB],0) AS CustomerBFROM ( SELECT YEAR(OrderDate) AS 'YEAR', MONTH(OrderDate) AS 'MONTH',Customer, Amount FROM Customer_Order) pPIVOT( SUM(Amount) FOR Customer IN ([CustomerA], [CustomerB])) AS pvt 客戶每次下單均量12345678910SELECT [YEAR],ISNULL([CustomerA],0) AS CustomerA, ISNULL([CustomerB],0) AS CustomerBFROM ( SELECT YEAR(OrderDate) AS 'YEAR',Customer, Amount FROM Customer_Order) pPIVOT( AVG(Amount) FOR Customer IN ([CustomerA], [CustomerB])) AS pvt","link":"/posts/ca24/"},{"title":"(MSSQL)查詢排程工作(schedule jobs)","text":"在SSMS中，點開DB -&gt; SQL Server Agent -&gt; 作業，裡面可以查詢各排程工作的設定及狀況，但只能一個一個點開來看。有時會想一次盤點所有的排程作業的排程名稱、設定、啟用狀態、執行頻率、執行狀況…等資料，可使用下面SQL指令查詢。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173use msdbgoSELECT [sJOB].[name] AS [JobName] , [sDBP].[name] AS [JobOwner] , [sCAT].[name] AS [JobCategory] , [sJOB].[description] AS [JobDescription] , [sJSTP].[step_id] AS [JobStartStepNo] , [sJSTP].[step_name] AS [JobStartStepName] , [sJOB].[date_created] AS [JobCreatedOn] , [sJOB].[date_modified] AS [JobLastModifiedOn] , CASE [sJOB].[enabled] WHEN 1 THEN 'Yes' WHEN 0 THEN 'No' END AS [IsEnabled] , CASE WHEN [sSCH].[schedule_uid] IS NULL THEN 'No' ELSE 'Yes' END AS [IsScheduled] , CASE WHEN [freq_type] = 64 THEN 'Start automatically when SQL Server Agent starts' WHEN [freq_type] = 128 THEN 'Start whenever the CPUs become idle' WHEN [freq_type] IN (4,8,16,32) THEN 'Recurring' WHEN [freq_type] = 1 THEN 'One Time' END [ScheduleType] , CASE [freq_type] WHEN 1 THEN 'One Time' WHEN 4 THEN 'Daily' WHEN 8 THEN 'Weekly' WHEN 16 THEN 'Monthly' WHEN 32 THEN 'Monthly - Relative to Frequency Interval' WHEN 64 THEN 'Start automatically when SQL Server Agent starts' WHEN 128 THEN 'Start whenever the CPUs become idle' END [Occurrence] , CASE [freq_type] WHEN 4 THEN 'Occurs every ' + CAST([freq_interval] AS VARCHAR(3)) + ' day(s)' WHEN 8 THEN 'Occurs every ' + CAST([freq_recurrence_factor] AS VARCHAR(3)) + ' week(s) on ' + CASE WHEN [freq_interval] &amp; 1 = 1 THEN 'Sunday' ELSE '' END + CASE WHEN [freq_interval] &amp; 2 = 2 THEN ', Monday' ELSE '' END + CASE WHEN [freq_interval] &amp; 4 = 4 THEN ', Tuesday' ELSE '' END + CASE WHEN [freq_interval] &amp; 8 = 8 THEN ', Wednesday' ELSE '' END + CASE WHEN [freq_interval] &amp; 16 = 16 THEN ', Thursday' ELSE '' END + CASE WHEN [freq_interval] &amp; 32 = 32 THEN ', Friday' ELSE '' END + CASE WHEN [freq_interval] &amp; 64 = 64 THEN ', Saturday' ELSE '' END WHEN 16 THEN 'Occurs on Day ' + CAST([freq_interval] AS VARCHAR(3)) + ' of every ' + CAST([freq_recurrence_factor] AS VARCHAR(3)) + ' month(s)' WHEN 32 THEN 'Occurs on ' + CASE [freq_relative_interval] WHEN 1 THEN 'First' WHEN 2 THEN 'Second' WHEN 4 THEN 'Third' WHEN 8 THEN 'Fourth' WHEN 16 THEN 'Last' END + ' ' + CASE [freq_interval] WHEN 1 THEN 'Sunday' WHEN 2 THEN 'Monday' WHEN 3 THEN 'Tuesday' WHEN 4 THEN 'Wednesday' WHEN 5 THEN 'Thursday' WHEN 6 THEN 'Friday' WHEN 7 THEN 'Saturday' WHEN 8 THEN 'Day' WHEN 9 THEN 'Weekday' WHEN 10 THEN 'Weekend day' END + ' of every ' + CAST([freq_recurrence_factor] AS VARCHAR(3)) + ' month(s)' END AS [Recurrence] , CASE [freq_subday_type] WHEN 1 THEN 'Occurs once at ' + STUFF( STUFF(RIGHT('000000' + CAST([active_start_time] AS VARCHAR(6)), 6) , 3, 0, ':') , 6, 0, ':') WHEN 2 THEN 'Occurs every ' + CAST([freq_subday_interval] AS VARCHAR(3)) + ' Second(s) between ' + STUFF( STUFF(RIGHT('000000' + CAST([active_start_time] AS VARCHAR(6)), 6) , 3, 0, ':') , 6, 0, ':') + ' &amp; ' + STUFF( STUFF(RIGHT('000000' + CAST([active_end_time] AS VARCHAR(6)), 6) , 3, 0, ':') , 6, 0, ':') WHEN 4 THEN 'Occurs every ' + CAST([freq_subday_interval] AS VARCHAR(3)) + ' Minute(s) between ' + STUFF( STUFF(RIGHT('000000' + CAST([active_start_time] AS VARCHAR(6)), 6) , 3, 0, ':') , 6, 0, ':') + ' &amp; ' + STUFF( STUFF(RIGHT('000000' + CAST([active_end_time] AS VARCHAR(6)), 6) , 3, 0, ':') , 6, 0, ':') WHEN 8 THEN 'Occurs every ' + CAST([freq_subday_interval] AS VARCHAR(3)) + ' Hour(s) between ' + STUFF( STUFF(RIGHT('000000' + CAST([active_start_time] AS VARCHAR(6)), 6) , 3, 0, ':') , 6, 0, ':') + ' &amp; ' + STUFF( STUFF(RIGHT('000000' + CAST([active_end_time] AS VARCHAR(6)), 6) , 3, 0, ':') , 6, 0, ':') END [Frequency] , [sSCH].[name] AS [JobScheduleName] --,[sJSTP].database_name , Last_Run = CONVERT(DATETIME, RTRIM(run_date) + ' ' + STUFF(STUFF(REPLACE(STR(RTRIM(h.run_time),6,0), ' ','0'),3,0,':'),6,0,':')) , case [sJSTP].Last_run_outcome When 0 then 'Failed' when 1 then 'Succeeded' When 2 then 'Retry' When 3 then 'Canceled' When 5 then 'Unknown' End as Last_Run_Status ,Last_Run_Duration_HHMMSS = STUFF(STUFF(REPLACE(STR([sJSTP].last_run_duration,7,0), ' ','0'),4,0,':'),7,0,':') , Max_Duration = STUFF(STUFF(REPLACE(STR(l.run_duration,7,0), ' ','0'),4,0,':'),7,0,':') , Next_Run= CONVERT(DATETIME, RTRIM(NULLIF([sJOBSCH].next_run_date, 0)) + ' ' + STUFF(STUFF(REPLACE(STR(RTRIM([sJOBSCH].next_run_time),6,0), ' ','0'),3,0,':'),6,0,':')) , CASE [sJOB].[delete_level] WHEN 0 THEN 'Never' WHEN 1 THEN 'On Success' WHEN 2 THEN 'On Failure' WHEN 3 THEN 'On Completion' END AS [JobDeletionCriterion] , [sSVR].[name] AS [OriginatingServerName] ,[sJSTP].subsystem ,[sJSTP].command ,h.messageFROM [msdb].[dbo].[sysjobs] AS [sJOB] LEFT JOIN [msdb].[sys].[servers] AS [sSVR] ON [sJOB].[originating_server_id] = [sSVR].[server_id] LEFT JOIN [msdb].[dbo].[syscategories] AS [sCAT] ON [sJOB].[category_id] = [sCAT].[category_id] LEFT JOIN [msdb].[dbo].[sysjobsteps] AS [sJSTP] ON [sJOB].[job_id] = [sJSTP].[job_id] AND [sJOB].[start_step_id] = [sJSTP].[step_id] LEFT JOIN [msdb].[sys].[database_principals] AS [sDBP] ON [sJOB].[owner_sid] = [sDBP].[sid] LEFT JOIN [msdb].[dbo].[sysjobschedules] AS [sJOBSCH] ON [sJOB].[job_id] = [sJOBSCH].[job_id] LEFT JOIN [msdb].[dbo].[sysschedules] AS [sSCH] ON [sJOBSCH].[schedule_id] = [sSCH].[schedule_id] left JOIN ( SELECT job_id, instance_id = MAX(instance_id),max(run_duration) AS run_duration FROM msdb.dbo.sysjobhistory GROUP BY job_id ) AS l ON sJOB.job_id = l.job_idleft JOIN msdb.dbo.sysjobhistory AS h ON h.job_id = l.job_id AND h.instance_id = l.instance_idORDER BY [JobName]","link":"/posts/f2c5/"},{"title":"(MSSQL)資料庫顯示「正在還原」無法使用處理方法","text":"切換資料庫的狀態為：ONLINE。 123RESTORE DATABASE [DBNAME] WITH RECOVERY GO","link":"/posts/62976/"},{"title":"(PowerShell)Exit Code&#x2F;Exit Status","text":"PowerShell取得Exit Code/Exit Status的兩個常用系統變數： $? $LastExitCode $?包含最後一個命令的執行狀態。 如果最後一個命令成功，則會包含 True，如果失敗，則為 False。Write-ErrorCmdlet 會在執行後將設定$?為false，但在呼叫它的函式中，不會將設定$?為false 12345678function Test-WriteError{ Write-Error &quot;Bad&quot; $? # $false}Test-WriteError$? # $true $LastExitCode上次執行之原生程式的結束代碼。 若為原生命令 (可執行檔) ，當$LastExitCode是0時，$?會設定為 True，當$LastExitCode為任何其他值，則設定為 False。","link":"/posts/3a8/"},{"title":"Perl Special Variables","text":"Special variables參考資料Tutorials Point: Perl - Special Variables 常用special variables列表 variable description $- 當前頁可打印的行數,屬於Perl格式系統的一部分 $! 根據上下文內容返回錯誤號或者錯誤串 $” 列表分隔符 $# 打印數字時預設的數字輸出格式 $$ Perl解釋器的進程ID $% 當前輸出通道的當前頁號 $&amp; 與上個格式匹配的字符串 $( 當前進程的組ID $) 當前進程的有效組ID $* 設置1表示處理多行格式.現在多以/s和/m修飾符取代之. $, 當前輸出字段分隔符 $. 上次閱讀的文件的當前輸入行號 $/ 當前輸入記錄分隔符,預設情況是新行 $: 字符設置,此後的字符串將被分開,以填充連續的字段. $; 在仿真多維數組時使用的分隔符. $? 返回上一個外部命令的狀態 $@ Perl解釋器從eval語句返回的錯誤消息 $[ 數組中第一個元素的索引號 $] Perl解釋器的子版本號 $^ 當前通道最上面的頁面輸出格式名字 $^A 打印前用於保存格式化數據的變數 $^D 調試標誌的值 $^E 在非UNIX環境中的操作系統擴展錯誤信息 $^F 最大的文件捆述符數值 $^H 由編譯器激活的語法檢查狀態 $^I 內置控制編輯器的值 $^L 發送到輸出通道的走紙換頁符 $^M 備用內存池的大小 $^O 操作系統名 $^P 指定當前調試值的內部變數 $^R 正則表達式塊的上次求值結果 $^S 當前解釋器狀態 $^T 從新世紀開始算起,腳步本以秒計算的開始運行的時間 $^W 警告開關的當前值 $^X Perl二進制可執行代碼的名字 $_ 預設的輸入/輸出和格式匹配空間 $ $~ 當前報告格式的名字 $` 在上個格式匹配信息前的字符串 $’ 在上個格式匹配信息後的字符串 $+ 與上個正則表達式搜索格式匹配的最後一個括號 $&lt; 當前執行解釋器的用戶的真實ID $1 含有與上個匹配正則表達式第一個括號結果 (如果有多個括號, 1 的數字可以替換成對應括號位置) $= 當前頁面可打印行的數目 $&gt; 當前進程的有效用戶ID $0 包含正在執行的腳本的文件名 $ARGV 從預設的文件句柄中讀取時的當前文件名 %ENV 環境變數列表 %INC 通過do或require包含的文件列表 %SIG 信號列表及其處理方式 @_ 傳給子程序的參數列表 @ARGV 傳給腳本的命令行參數列表 @INC 在導入模塊時需要搜索的目錄列表 $-[0] $+[0] 代表當前匹配的正則表達式在被匹配的字符串中的起始和終止的位置","link":"/posts/7d90/"},{"title":"(PowerShell)檔案與目錄操作(建立、複製、搬移、刪除)","text":"檢查檔案/目錄是否存在使用Test-Path指令檢查，存在傳回True，不存在傳回False 1234# 檢查檔案是否存在Test-Path -Path &quot;D:\\Logfiles\\xxx.log&quot;# 檢查目錄是否存在Test-Path -Path &quot;D:\\Logfiles&quot; 檢查是路徑是檔案或是目錄1.可使用Test-Path的-FileType參數來判斷，用Leaf檢查是否是檔案，或用Container來檢查是否為目錄 12345678Test-Path -Path &quot;D:\\Logfiles\\xxx.log&quot; -PathType Leaf# TrueTest-Path -Path &quot;D:\\Logfiles\\xxx.log&quot; -PathType Container# FalseTest-Path -Path &quot;D:\\Logfiles&quot; -PathType Leaf# FalseTest-Path -Path &quot;D:\\Logfiles&quot; -PathType Container# True 2.使用System.IO.DirectoryInfo來判斷是否為目錄 1234$(Get-Item &quot;D:\\Logfiles\\xxx.log&quot;) -is [System.IO.DirectoryInfo]# False$(Get-Item &quot;D:\\Logfiles&quot;) -is [System.IO.DirectoryInfo]# True 3.使用PSIsContainer判斷 1234$(Get-Item &quot;D:\\Logfiles\\xxx.log&quot;).PSIsContainer# False$(Get-Item &quot;D:\\Logfiles&quot;).PSIsContainer# True 建立檔案/目錄建立新目錄或一個新的空白檔案，可使用New-Item指令 1234# 建立新目錄New-Item &quot;D:\\LogArchive&quot; -ItemType &quot;Directory&quot;# 建立新空白檔案，像是LINUX系統的touch指令New-Item &quot;D:\\LogArchive\\xxx.bak&quot; -ItemType &quot;File&quot; 複製檔案/目錄複製單一檔案1234# 複製檔案Copy-Item &quot;D:\\Logfiles\\xxx.log&quot; -Destination &quot;D:\\Logfiles\\xxx.bak&quot;# 複製檔案到指定目錄Copy-Item &quot;D:\\Logfiles\\xxx.log&quot; -Destination &quot;D:\\LogArchive&quot; 複製目錄下所有資料複製整個目錄（連同裡面的所有檔案），需加上Recurse參數，若未加上Recurse參數，只會複製Logfiles下面這一層的檔案與子目錄，但子目錄內檔案不會複製 1Copy-Item &quot;D:\\Logfiles\\*&quot; -Destination &quot;D:\\LogArchive&quot; -Recurse 搬移檔案/目錄使用Move-Item指令，-Destination參數使用方法同Copy-Item 1Move-Item &quot;D:\\Logfiles\\xxx.log&quot; -Destination &quot;D:\\LogArchive\\xxx.bak&quot; 刪除檔案/目錄使用Remove-Item指令 1234# 刪除檔案Remove-Item &quot;D:\\LogArchive\\xxx.bak&quot;# 刪除目錄Remove-Item &quot;D:\\LogArchive&quot; 確認路徑是否為UNC路徑","link":"/posts/6e27/"},{"title":"(PowerShell)New-PSDrive","text":"Syntax1234567891011New-PSDrive [-Name] &lt;String&gt; [-PSProvider] &lt;String&gt; [-Root] &lt;String&gt; [-Description &lt;String&gt;] [-Scope &lt;String&gt;] [-Persist] [-Credential &lt;PSCredential&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] Ex: 建立映射到網路共享的暫存磁碟1234567891011# 建立名為Public的暫存磁碟，映射到\\\\Server01\\PublicNew-PSDrive -Name &quot;Public&quot; -PSProvider &quot;FileSystem&quot; -Root &quot;\\\\Server01\\Public&quot;# 建立暫存磁碟後，可透過Get-Item或Get-ChildItem取得內容, 磁碟名稱後的冒號(:)記得一定要加Get-ChildItem Public:Get-Item Public:# 新增/搬移/複製/刪除暫存磁碟檔案或目錄Move-Item &quot;xxx.txt&quot; -Destination &quot;Public:&quot;Copy-Item &quot;xxx.txt&quot; -Destination &quot;Public:\\AANew-Item &quot;Public:\\LogArchive&quot; -ItemType &quot;Directory&quot;","link":"/posts/c17d/"},{"title":"(PowerShell)檢查&#x2F;設定TrustedHosts","text":"取得目前TrustedHosts名單1Get-Item WSMan:\\localhost\\Client\\TrustedHosts 設定TrustedHosts 12345678# 設定特定的IPwinrm set winrm/config/client '@{TrustedHosts=&quot;xxx.xxx.xxx.xxx,yyy.yyy.yyy.yyy&quot;}'# 設定allow all *Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value &quot;*&quot; -Force#加入TrustedHosts (Concatenate是append，若沒加Concatenate，會一直覆蓋)Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value &quot;zzz.zzz.zzz&quot; -Concatenate 重啟WinRM Service1Restart-Service WinRM","link":"/posts/4127/"},{"title":"(PowerShell)常見輸出訊息的方法","text":"Write-Host直接輸出到終端機畫面 1Write-Host &quot;Hello World&quot; Write-Output將訊息傳遞出來，若無接收者，則輸出到終端機畫面 12345# 輸出到終端機畫面Write-Output &quot;Hello World&quot;# 後有接收者，因此寫入xxx.txtWrite-Output &quot;Hello World&quot; | Out-File -FilePath &quot;D:\\xxx.txt&quot; Write-Warning輸出警告訊息，會搭配$WarningPreference來設定是否輸出訊息，$WarningPreference預設為Continue，因此會輸出訊息後繼續執行 12345# 檢查$WarningPreference狀態$WarningPreference# 輸出至終端機Write-Warning &quot;Hello World&quot; Write-Debug輸出偵錯訊息，會搭配$DebugPreference來設定是否輸出訊息，$DebugPreference預設為SilentlyContinue，因此不會輸出訊息，但會往下執行 12345678# 檢查$DebugPreference狀態$DebugPreference# 若DebugPreference值為SilentlyContinue，則不會輸出訊息且繼續執行Write-Debug &quot;Hello World&quot;# 不管$DebugPreference值為何，強制以DEBUG方式輸出Write-Debug &quot;Hello World&quot; -Debug Write-Error除了輸出訊息到終端機外，還會將錯誤訊息加入到Error Stream(也就是$Error變數)，且不會終止當前動作，繼續往下執行 1Write-Error &quot;Hello World&quot;","link":"/posts/81e3/"},{"title":"*args和**kwargs可變參數用法","text":"*args和**kwargs是Python程式中能夠接收可變長度的參數。 *args打包成元組(Tuple)資料型態，**kwargs打包成字典(Directory)資料型態。 *args與**kwargs可一起使用，但*args要放在**kwarg之前，不然會發生語法錯誤。 程式範例： 1234567891011121314151617def fun1(*info1): print(info1)def fun2(**info2): print(info2)def fun3(*info1, **info2): print(info1, info2)fun1(&quot;John&quot;,&quot;001&quot;,&quot;2020/10/10&quot;)# ('John', '001', '2020/10/10')fun2(name=&quot;John&quot;,eid=&quot;001&quot;,date=&quot;2020/10/10&quot;)# {'name': 'John', 'eid': '001', 'date': '2020/10/10'}fun3(&quot;John&quot;,&quot;001&quot;,&quot;2020/10/10&quot;,name=&quot;John&quot;,eid=&quot;001&quot;,date=&quot;2020/10/10&quot;)# ('John', '001', '2020/10/10') {'name': 'John', 'eid': '001', 'date': '2020/10/10'}","link":"/posts/8977/"},{"title":"(Python網路爬蟲)爬取台銀上一個營業日歷史匯率","text":"本篇將使用pandas.read_html()函式，實作爬取台銀上一個營業日匯率的網路爬蟲。可用Google Colab線上實作，不需安裝Python與套件。 台銀牌告/歷史匯率網址 No. 類別 URL 1 歷史匯率-上一個營業日 https://rate.bot.com.tw/xrt/all/day 2 歷史匯率-某一個營業日 https://rate.bot.com.tw/xrt/all/yyyy-mm-dd 3 牌告匯率 https://rate.bot.com.tw/xrt 上表為台銀各類匯率URL，視需求使用，此篇是以爬取「上一個營業日歷史匯率」為實作案例，「歷史匯率」與「牌告匯率」爬取回來的內容不太一樣，請視請狀自行修改。 爬取匯率資料程式碼1234567891011121314151617181920212223import pandas as pdimport numpy as np# 歷史匯率-上一個營業日 URLurl = 'https://rate.bot.com.tw/xrt/all/day'# 讀取網頁bot_data = pd.read_html(url)# 匯率資料為爬取回來的網頁資料第一個表格df = bot_data[0]# 將column從二維轉為一維df.columns = [' '.join(col).strip() for col in df.columns.values]# 刪除dataframe最後三欄不需要的資料df.drop(columns=df.columns[-3:], axis=1, inplace=True)# 重新命名column namedf.columns = ['幣別', '現金匯率買入', '現金匯率賣出', '即期匯率買入', '即期匯率賣出']# 將幣別欄內容轉為幣別碼，從第一個括號()中的幣別碼取出，例如: &quot;美金 (USD) 美金 (USD)&quot; =&gt; &quot;USD&quot;df['幣別'] = df['幣別'].apply(lambda x: x[x.find(&quot;(&quot;)+1:x.find(&quot;)&quot;)]) 整理後df內容如下圖 匯出成CSV或EXCEL檔案若要匯出CSV檔: 12345# 不保留index和column，加上參數index=None, columns=Nonedf.to_csv('exrate.csv', index=None, columns=None, encoding='utf_8_sig')# 保留index和columns，加上encoding='utf_8_sig'避免產生亂碼df.to_csv('exrate.csv', encoding='utf_8_sig') 若要匯出excel檔: 12345678910# 將'-'轉換為NaNdf = df.replace('-', np.nan)# 將匯率欄位轉換為數值格式df[['現金匯率買入', '現金匯率賣出', '即期匯率買入', '即期匯率賣出']] = df[['現金匯率買入', '現金匯率賣出', '即期匯率買入', '即期匯率賣出']].apply(pd.to_numeric, errors='ignore')##### 上面兩個步驟，用途是事先處理資料格式，匯出至excel檔，各個cell都已經是數值格式# to_excel需安裝openpyxldf.to_excel(&quot;ExchangeRate.xlsx&quot;,sheet_name='Sheet_name_1')","link":"/posts/9a8c/"},{"title":"Python更新pip到最新版本","text":"用pip更新 12pip install --upgrade pippip install -U pip 用python命令來安裝 12python -m pip install --upgrade pippython -m pip install -U pip 在Windows中，若遇權限問題而無法執行，可加上–user試看看 1python -m pip install --user --upgrade pip 在Linux可加上sudo 1sudo python -m pip install --upgrade pip","link":"/posts/8637/"},{"title":"(Pandas) 如何取得DataFrame資訊及大小等資訊(number of rows, columns, elements)","text":"本文說明如何取得DataFrame行數、列數、大小、及其他相資訊(number of rows, columns, elements)。 首先建立一個DataFrame，下面各方法都以此DataFrame做範例： 1234567891011&gt;&gt;&gt; import pandas as pd &gt;&gt;&gt; df = pd.DataFrame({ 'col1': [1, 2], 'col2': ['VAL1', 'VAL2'], 'col3': [5.555, 6.666], 'col4': [None, 4] })&gt;&gt;&gt; print(df) col1 col2 col3 col40 1 VAL1 5.555 NaN1 2 VAL2 6.666 4.0 df.info(): 顯示行數、列數、記憶體用量…等資訊info()方法可顯示DataFrame的資訊，如記憶體用量、行數、列數、non-null(non-NaN)的元素量、欄位資料型態(Dtype)…等資訊。其結果為標準輸出，不能做為變數或用來計算。 123456789101112&gt;&gt;&gt; df.info()&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 2 entries, 0 to 1Data columns (total 4 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 col1 2 non-null int64 1 col2 2 non-null object 2 col3 2 non-null float64 3 col4 1 non-null float64dtypes: float64(2), int64(1), object(1)memory usage: 192.0+ bytes df.shape: 取得行數(columns)、列數(rows)shape屬性回傳一個tuple，裡面儲存DataFrame維度(列數及行數)。 123456789101112131415&gt;&gt;&gt; print(df.shape)(2, 4)&gt;&gt;&gt; print(df.shape[0])2&gt;&gt;&gt; print(df.shape[1])4# Unpack a tuple and store the values in separate variables&gt;&gt;&gt; rows, cols = df.shape&gt;&gt;&gt; print(rows)2&gt;&gt;&gt; print(cols)4 len(): 取得行數(columns)、列數(rows)要取得DataFrame行數及列數，可使用len()函式。 1234567# rows&gt;&gt;&gt; print(len(df))2# columns&gt;&gt;&gt; print(len(df.columns))4 df.size: 取得DataFrame所有元素(element)的總數量12&gt;&gt;&gt; print(df.size)8 ★ 使用set_index()方法注意事項若使用set_index()方法將column設定為index時，此column將不再計入總列數。 123456789101112131415161718192021222324252627&gt;&gt;&gt; df2 = df.set_index(['col1'])&gt;&gt;&gt; print(df2) col2 col3 col4col1 1 VAL1 5.555 NaN2 VAL2 6.666 4.0&gt;&gt;&gt; df2.info()&lt;class 'pandas.core.frame.DataFrame'&gt;Index: 2 entries, 1 to 2Data columns (total 3 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 col2 2 non-null object 1 col3 2 non-null float64 2 col4 1 non-null float64dtypes: float64(2), object(1)memory usage: 64.0+ bytes&gt;&gt;&gt; print(df2.shape)(2, 3)&gt;&gt;&gt; print(len(df2.columns))3&gt;&gt;&gt; print(df2.size)6","link":"/posts/dca9/"},{"title":"(Python)爬蟲偽裝User-Agent - fake_useragent套件","text":"前言爬蟲程式會消耗網站伺服器系統資源，因此有些網站會檢查偵測網站訪問是否為爬蟲程式，並進一步阻擋爬蟲程式，常見的像是封鎖IP來阻擋請求。 本文介紹一個Python套件fake_useragent，將爬蟲程式偽裝為瀏覽器提出請求訪問網站。 什麼是User-Agent User-Agnet(使用者代理，簡稱UA)，會告訴網站伺服器，你是透過什麼工具(作業系統、瀏覽器名稱、瀏覽器版本、渲染引擎、外掛程式…等資訊)發送請求的。 偽裝User-Agent我們先來看一下，使用Python requests套件直接提出請求，預設的Header如下： 12345import requestsresponse = requests.get('https://www.google.com)print(response.request.headers){'User-Agent': 'python-requests/2.30.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 預設的User-Agent是python-requests/2.30.0，等於直接告訴對方伺服器我就是Python程式。 所以送出請求前，我們可以先修改User-Agent，偽裝為一般瀏覽器提出的請求，避免被對方識別為爬蟲程式而被封鎖。 fake_useragent套件fake_useragnet是Python的第三方套件，它可以幫助我們將程式加上Uesr-Agent，偽裝為指定或隨機生成瀏覽器提出訪問網站請求。 安裝fake_useragnetpip安裝 12345678# installpip install fake_useragent# updatepip install -U fake_useragent# check versionpip show fake_useragent Usage產生指定瀏覽器的User-Agnet 123456789101112131415161718192021222324252627282930313233from fake_useragent import UserAgentua = UserAgent()### IE ###print(ua.ie)# 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; chromeframe/11.0.696.57)'print(ua['Internet Explorer'])# 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Zune 3.0)'print(ua.msie)# 'Mozilla/4.0 (compatible; MSIE 4.01; Windows CE; PPC; 240x320; PPC)'### Google Chrome ###print(ua.google)# 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.3 Safari/534.24'print(ua.chrome)# 'Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.202.0 Safari/532.0'print(ua['google chrome'])# 'Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.209.0 Safari/532.0'### FireFox ###print(ua.firefox)# 'Mozilla/5.0 (Windows; U; Windows NT 5.1; pl; rv:1.8.0.2) Gecko/20060308 Firefox/1.5.0.2'print(ua.ff)# 'Mozilla/5.0 (X11; Linux i686; rv:2.0) Gecko/20100101 Firefox/3.6'### Safari ###print(ua.safari)# 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/522.11 (KHTML, like Gecko) Version/3.0.2 Safari/522.12'### Opera ###print(ua.opera)'Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; de) Presto/2.9.168 Version/11.52' 爬蟲程式最實用的，是要有一定的隨機性，可用random隨機產生Agent-User，範例如下： 1234567891011from fake_useragent import UserAgentua = UserAgent()print(ua.random)print(ua.random)print(ua.random)# 'Opera/9.61 (Windows NT 6.0; U; http://lucideer.com; en-GB) Presto/2.1.1'# 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36'# 'Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4' 爬蟲程式中偽裝User-Agnet範例123456789101112131415161718import requestsimport fake_useragent import UserAgent# 隨機產生User-Agentua = UserAgent()user_agent = ua.random# 要爬取的網址url = 'https://www.xxxxx.com/'# 開始爬取response = requests.get(url=url, headers={ 'user-agent': user_agent.random })if response.status_code == 200: ...else: ...","link":"/posts/ecec/"},{"title":"加速SSMS&#x2F;Visual Studio啟動速度","text":"捷徑後加 -nosplash","link":"/posts/cc3b/"},{"title":"(CMD)使用tasklist&#x2F;taskkill指令，查詢與刪除process","text":"tasklist指令查詢查詢 notepad.exe的process清單 1tasklist | find &quot;notepad.exe&quot; taskkill指令刪除process12345678# 用process name刪除taskkill /IM notepad.exe /F# 用PID刪除taskkill /PID PID /F# 同時刪除多個process by PIDtaskkill /PID PID1 /PID PID2 /F","link":"/posts/db3c/"},{"title":"win-acme申請Let&#39;s Encrypt SSL","text":"1. 下載並解壓縮win-acme至win-acme網站下載檔案，並解壓縮 2. 以系統管理員身分開啟「命令提示字元(CMD)」 3. 輸入N，按[Enter]，開始建立憑證申請 4. win-acme會掃描IIS內站台，並列出站台序號及名稱可依據自己需求，選擇要申請憑證的網域名稱，或直接按{Enter]選擇綁定所有IIS上的網域名稱。(這邊的例子是選擇單一站台，選擇A綁定所有) 5. 選定後，閱讀及同意服務條款 6. 輸入email，若要輸入多個email，用逗號區隔輸入email，按下[Enter]，程式就會自動執行憑證申請、新增憑證到IIS要綁定的站台，以及到期前自動更新的作業。 7. IIS管理員 → 伺服器憑證上面動作完成後，即可在IIS中看到憑證已自動綁定匯入 8. 瀏覽器檢查憑證是否生效","link":"/posts/101d/"},{"title":"(CMD)利用fsutil指令建立指定大小的檔案","text":"fsutilLinux環境中，可使用fallocate指令快速建立指定大小的檔案，在Windows中，可用Windows內建的fsutil工具來達成此目的，fsutil有許多的功能，建立指定大小檔案只是其中的一項。 需注意，在微軟官方的文件中，有特別說明，必須以系統管理員或Administrators群組的成員身分登入，才能使用fsutil。 建立指定大小檔案 fsutil file createnew1fsutil file createnew &lt;filename&gt; &lt;length&gt;","link":"/posts/6fda/"},{"title":"(Windows)如何開啟XPS檔案及安裝XPS檢視器","text":"遇到使用者反映XPS檔案無法開啟，需安裝「XPS檢視器」。在Windows 10/11下，如何安裝「XPS檢視器」，在這裡記錄一下兩個方法。 方法一：從「設定」中的「應用程式」安裝 1.點擊Windows鍵 &amp;rarr; 設定 2.點擊「應用程式」 3.點擊「選用功能」 4.點擊「新增功能」 5.搜尋欄打入XPS，勾選「XPS檢視器」，點擊「安裝」 6.等待安裝完成 完成安裝後，就可以打開XPS副檔名的檔案了。若照上述步驟無法安裝成功，可用下面方法二安裝試看看。 方法二：用指令安裝1.找到命令提示字元(CMD)或PowerShell，以「以系統管理員身分執行」啟動 2.輸入以下指令，等待安裝完成就可以了。 1DISM /Online /Add-Capability /CapabilityName:XPS.Viewer~~~~0.0.1.0","link":"/posts/c120/"}],"tags":[{"name":"Apache","slug":"Apache","link":"/tags/Apache/"},{"name":"HSTS","slug":"HSTS","link":"/tags/HSTS/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"htaccess","slug":"htaccess","link":"/tags/htaccess/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"MSSQL","slug":"MSSQL","link":"/tags/MSSQL/"},{"name":"PowerShell","slug":"PowerShell","link":"/tags/PowerShell/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"IIS","slug":"IIS","link":"/tags/IIS/"},{"name":"404","slug":"404","link":"/tags/404/"},{"name":"ICARUS","slug":"ICARUS","link":"/tags/ICARUS/"},{"name":"HTTPS","slug":"HTTPS","link":"/tags/HTTPS/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"SELECT INTO SELECT","slug":"SELECT-INTO-SELECT","link":"/tags/SELECT-INTO-SELECT/"},{"name":"INSERT INTO FROM","slug":"INSERT-INTO-FROM","link":"/tags/INSERT-INTO-FROM/"},{"name":"DBCC CHECKIDENT","slug":"DBCC-CHECKIDENT","link":"/tags/DBCC-CHECKIDENT/"},{"name":"PIVOT","slug":"PIVOT","link":"/tags/PIVOT/"},{"name":"restoring","slug":"restoring","link":"/tags/restoring/"},{"name":"Perl","slug":"Perl","link":"/tags/Perl/"},{"name":"special variables","slug":"special-variables","link":"/tags/special-variables/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"爬蟲","slug":"爬蟲","link":"/tags/%E7%88%AC%E8%9F%B2/"},{"name":"pip","slug":"pip","link":"/tags/pip/"},{"name":"pandas","slug":"pandas","link":"/tags/pandas/"},{"name":"SSMS","slug":"SSMS","link":"/tags/SSMS/"},{"name":"CMD","slug":"CMD","link":"/tags/CMD/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"},{"name":"XPS檢視器","slug":"XPS檢視器","link":"/tags/XPS%E6%AA%A2%E8%A6%96%E5%99%A8/"}],"categories":[{"name":"Apache","slug":"Apache","link":"/categories/Apache/"},{"name":"Markdown","slug":"Markdown","link":"/categories/Markdown/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"MSSQL","slug":"MSSQL","link":"/categories/MSSQL/"},{"name":"PowerShell","slug":"PowerShell","link":"/categories/PowerShell/"},{"name":"Django","slug":"Django","link":"/categories/Django/"},{"name":"IIS","slug":"IIS","link":"/categories/IIS/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Perl","slug":"Perl","link":"/categories/Perl/"},{"name":"Python","slug":"Python","link":"/categories/Python/"}],"pages":[{"title":"","text":"google-site-verification: google0aae38270f8a6163.html","link":"/google0aae38270f8a6163.html"},{"title":"404","text":"404 - Page Not FoundSorry, the page you are currently trying to access does not exist. We will redirect you to the homepage in approximately 5 seconds. Otherwise you can click here to be redirected to the homepage. let countTime = 5; function count() { document.getElementById('timeout').textContent = countTime; countTime -= 1; if(countTime === 0){ location.href = 'https://chingsoo.github.io/'; // 記得改成自己網址 Url } setTimeout(() => { count(); }, 1000); } count();","link":"/404.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}]}