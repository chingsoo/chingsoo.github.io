{"posts":[{"title":"Enable GZIP Compression in Apache","text":"編輯http.conf1vim /etc/httpd/conf/httpd.conf 檢查是否有載入以下模組 123LoadModule deflate_module modules/mod_deflate.soLoadModule headers_module modules/mod_headers.soLoadModule filter_module modules/mod_filter.so 編輯deflate.conf這個檔案預設應該是沒有，所以直接建立檔案 1vim /etc/httpd/conf.d/deflate.conf 複製貼上以下內容 123456789101112131415#Set to gzip all output SetOutputFilter DEFLATE #AddOutputFilterByType DEFLATE text/html text/css text/plain text/xml application/x-javascript application/x-httpd-php #exclude the following file types SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|iso|tar|bz2|sit|rar|png|jpg|gif|jpeg|flv|swf|mp3)$ no-gzip dont-vary #set compression level DeflateCompressionLevel 6 #Handle browser specific compression requirements BrowserMatch ^Mozilla/4 gzip-only-text/html BrowserMatch ^Mozilla/4.0[678] no-gzip BrowserMatch bMSIE !no-gzip !gzip-only-text/html SetEnvIf User-Agent &quot;.*MSIE.*&quot; nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0 說明：SetOutputFilter DEFLATE這行會把所有要輸出的檔案都壓縮，相反的你可以用AddOutputFilterByType DEFLATE後面加上指定的 MIME 類型的檔案，來指定只壓縮某些類型的檔案(這裡註解掉不使用)。 因為我們指定所有輸出的檔案都要壓縮，但其實有些檔案執行壓縮的效率不高，所以要排除，避免耗用太多 CPU，使用SetEnvIfNoCase Request_URI來把這些類型的檔案排除。 接著設定壓縮等級，等級從 1 到 9 級，數字越高，壓縮率越高，但 CPU 耗用的也越大，可以自行調整，預設是 6，不建議設太高，除非你伺服器的 CPU 閒閒沒事做。最後就是針對瀏覽器做個別調整。 重啟Apache Server1service httpd restart","link":"/ApacheEnableGZipCompression/"},{"title":"htaccess 301 轉址","text":"利用mod_rewrite功能修改如下: 1234567891011# 以下兩行不可省略Options +FollowSymLinksRewriteEngine on# 將index.php 轉到 /RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\\ /.*index\\.php\\ HTTP/RewriteRule ^(.*)index\\.php$ /$1 [R=301,L]# 將沒有www 轉到有 wwwRewriteCond %{HTTP_HOST} ^domain.com [NC]RewriteRule ^(.*)$ http://www.domain.com/$1 [L,R=301]","link":"/301redirect/"},{"title":"Hexo+GitHub Pages架設個人blog","text":"HexoHexo 是一個基於 Node.js 開發的網誌框架，具有下列幾項特點： 使用Markdown語法 一鍵部署，只需一個指令就能部署到GitHub Pages或Heroku等支援靜態網頁的空間 豐富的外掛套件，可安裝外掛支援Jade, CoffeeScript 輕量級，編輯速度快 支援多樣Theme 1. 前置作業安裝Node.jsNode.js官網下載安裝，安裝後用CMD檢查是否安裝成功 1node -v 1npm -v 安裝hexo-deployer-git1npm install hexo-deployer-git --save 安裝Hexo1npm install hexo-cli -g 2. Hexo環境建置初始化Hexo1hexo init [folder] 安裝所需套件切換到初始化完的Hexo資料夾，執行下列指令，安裝所需npm套件： 1npm install npm會根據 package.json 中設定，載入所有專案中所需套件模組 初始化與安裝完成後，進入資料夾會看到以下檔案和資料夾 12345678.+-- _config.yml+-- package.json+-- scaffolds+-- source| +-- _drafts| +-- _posts+-- themes 3. Hexo指令清除靜態檔案及快取(clean)清除db.json及public資料夾中已產生的靜態檔案 12hexo cleanhexo cl #簡寫 產生靜態檔案(generate)產生靜態檔案。此指令會建立public資料夾，所有靜態檔案都在此資料夾中 12hexo generatehexo g #簡寫 啟動伺服器(server)啟動Hexo伺服器 12hexo serverhexo s #簡寫 4. 將網站部署到GitHub新增Repository將repository命名為username.github.io (username請改為自己的帳號名稱)，下方設定都預設不需更動，最後按下Create repository按鈕。 修改_config.yml中的deploy設定 此處 _config.yml 是hexo根目錄的檔案，不是themes下的。 _config.yml 拉到最下方，可看到 deploy 區塊，修改內容如下： 1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master deploy到GitHub使用下面指令將檔案deploy到GitHub： 12hexo deployhexo d #簡寫 或是先清除快取 1hexo cl &amp;&amp; hexo d -g 5. 參考資料【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌","link":"/Hexo-GitHub-Pages-personal-blog/"},{"title":"Reducing LDF file size","text":"1. 查詢’DBNAME_log’實際名稱1SELECT * FROM SYS.DATABASE_FILES 2. 將資料庫改成簡單(simple)模式1ALTER DATABASE DBNAME SET RECOVERY SIMPLE 3. SHRINKFILE123USE *DBNAME*GODBCC SHRINKFILE('DBNAME_log',2) SHRINKFILE語法12345678DBCC SHRINKFILE ( { file_name | file_id } { [ , EMPTYFILE ] | [ [ , target_size ] [ , { NOTRUNCATE | TRUNCATEONLY } ] ] } ) [ WITH NO_INFOMSGS ] 4. 將資料庫改回完整(FULL) 模式1ALTER DATABASE DBNAME SET RECOVERY FULL","link":"/Reducing-LDF-Size/"},{"title":"PsTools (PsExec)","text":"Usage1psexec [\\\\computer[,computer2[,...] | @file]][-u user [-p psswd]][-n s][-r servicename][-h][-l][-s|-e][-x][-i [session]][-c [-f|-v]][-w directory][-d][-&lt;priority&gt;][-a n,n,...][-verbose] cmd [arguments] Parameters Parameter Description -a 以逗號分隔應用程式可執行檔處理器，其中 1 是最低的編號 CPU。 例如，若要在 CPU 2 和 CPU 4 上執行應用程式，請輸入：「-a 2，4」 -c 將指定的可執行檔案複製到遠端系統以供執行。 如果您省略此選項，應用程式必須位於遠端系統上的系統路徑中。 -d 請勿等候進程終止 (非互動式) 。 -e 不會載入指定的帳號設定檔。 -f 即使檔案已存在於遠端系統上，仍複製指定的程式。 -i 執行程式，使其與遠端系統上指定會話的桌面互動。 如果未指定任何會話，進程就會在主控台會話中執行。 嘗試使用重新導向的標準 IO) ，以互動方式 (執行主控台應用程式時 ，需要 此旗標。 -h 如果目標系統是 Vista 或更高版本，請讓進程在有帳戶提升許可權的權杖的情況下執行。 -l 以有限使用者身分執行程式 (移除 Administrators 群組，並只允許指派給 Users 群組的許可權) 。 在 Windows Vista 上，進程會以低完整性執行。 -n 指定連線到遠端電腦的秒數逾時。 -p 指定使用者名稱的選擇性密碼。 如果您省略此專案，系統會提示您輸入隱藏的密碼。 -r 指定要建立或互動的遠端服務名稱。 -s 在系統帳戶中執行遠端進程。 -u 指定登入遠端電腦的選擇性使用者名稱。 -v 只有在指定檔案的版本號碼較高或比遠端系統上的版本更新時，才複製指定的檔案。 -w 設定相對於遠端電腦) 的程式工作目錄 (。 -x 僅) 在 Winlogon 安全桌面上顯示 UI (本機系統。 -priority 指定 -low、-belownormal、-abovenormal、-high 或 -realtime，以不同的優先順序執行進程。 使用 -background 在 Vista 上以低記憶體和 I/O 優先順序執行。 computer 指示 PsExec 在指定的遠端電腦或電腦上執行應用程式。 如果您省略電腦名稱稱，PsExec 會在本機系統上執行應用程式，而且如果您指定萬用字元 (\\*) ，PsExec 會在目前網域的所有電腦上執行 命令。 @file PsExec 會在檔案中列出的每部電腦上執行 命令。 cmd 要執行的應用程式名稱。 arguments 要傳遞 (的引數請注意，檔案路徑必須是目標系統上的絕對路徑) 。 -accepteula 此旗標會隱藏授權對話方塊的顯示。 其他PsTools工具 工具 描述 PsExec 可讓您在任何使用者內容中執行處理序。 PsFile 顯示系統上以遠端方式開啟的檔案。 PsGetSid 顯示電腦或使用者的 Windows 安全性識別碼 (SID)。 PsInfo 列出有關 Windows 系統的資訊。 PsKill 根據名稱或處理序識別碼刪除處理序。 PsList 列出有關執行中處理序的詳細資訊。 PsLoggedOn 顯示所有本機登入使用者，以及遠端資源共用使用者。 PsLogList 傾印 Windows 事件記錄檔記錄。 PsPasswd 變更使用者帳戶密碼。 PsService 檢視和控制 Windows 服務。 PsShutdown 讓電腦關閉、重新啟動、休眠或暫止。 PsSuspend 暫止執行中的處理序。 取得最高SYSTEM權限以系統管理員身分執行CMD(命令提示字元) 執行指令 1psexec.exe -s -i cmd.exe 應該就會彈出另一個視窗成功拿到 systemroot 的cmd.exe可以下指令whoami確認，身分會是nt authority\\system你就成功取得了傳說中的最高system權限超越administrator的權限 Run local bat file on a remote machine1psexec \\\\remotemachine -u remoteuser -i -d cmd -c localdisk:\\folder\\batchfile.bat -c will copy from local path","link":"/PsTools(PsExec)/"},{"title":"Apache設定HSTS","text":"1. 開啟apache headers模組1sudo a2enmod headers 2. 重新啟動apache server 1sudo service apache2 restart 3. 設定/etc/apache2/conf-available/security.conf，加上 header 設定1Header always set Strict-Transport-Security &quot;max-age=31536000;includeSubdomains; preload&quot; 4. 重新載入設定1sudo service apache2 reload 5. 設定完成，可以試著用瀏覽器看一下 response header","link":"/Apache-setup-HSTS/"},{"title":"(PowerShell)壓縮&#x2F;解壓縮","text":"壓縮/解壓縮 指令 說明 Compress-Archive 壓縮 Expand-Archive 解壓縮 2個指令的常用參數相似，見以下說明。 壓縮整個資料夾12# 建立 Zip 壓縮檔Compress-Archive -Path C:\\Folder -DestinationPath C:\\Archive.zip 壓縮多個檔案12# 壓縮多個檔案Compress-Archive -Path C:\\Folder\\file.docx, C:\\Folder\\picture.png -DestinationPath C:\\Archive.zip 更新壓縮檔(Update)/強制覆蓋(Force)12# 更新壓縮檔Compress-Archive -Path C:\\Folder\\*.txt -Update -DestinationPath C:\\Archive.zip 12# 強制覆蓋Compress-Archive -Path C:\\Folder\\*.txt -Force -DestinationPath C:\\Archive.zip 指定壓縮層級(CompressionLevel) level description Fastest 最快速方式壓縮。(檔案較大) NoCompression 不壓縮 Optimal 最佳化壓縮，此方式為預設值。(檔案較小) 若要減少壓縮時間，可以Fastest壓縮層級進行壓縮 1Compress-Archive -Path C:\\Folder -CompressionLevel Fastest -DestinationPath C:\\Archive.zip 指名檔案名稱(LiteralPath)大部分狀況下使用-Path可順利進行壓縮，若遇檔案名稱含有特殊字元或萬用字元等狀況，無法順利壓縮時，可改用-LiteralPath參數 1Compress-Archive -LiteralPath D:\\StrangeFileName.jpg -DestinationPath D:\\MyArchive.zip 加密壓縮(7-Zip)powershell內建的Compress-Archive指令並無加密功能，改用7-Zip可在壓縮時加上密碼。 12345678910111213$7zipPath = &quot;$env:ProgramFiles\\7-Zip\\7z.exe&quot;if (-not (Test-Path -Path $7zipPath -PathType Leaf)) { throw &quot;7 zip file '$7zipPath' not found&quot;}Set-Alias 7zip $7zipPath$Source = &quot;c:\\BackupFrom\\backMeUp.txt&quot;$Target = &quot;c:\\BackupFolder\\backup.zip&quot;$pass = [System.Web.Security.Membership]::GeneratePassword(10,2)7zip a -mx=9 $Target $Source -p$pass Exit Codes from 7-Zip Code Meaning 0 No error 1 Warning (Non fatal error(s)). For example, one or more files were locked by some other application, so they were not compressed. 2 Fatal error 7 Command line error 8 Not enough memory for operation 255 User stopped the process","link":"/compress-archive-in-powershell/"},{"title":"(PowerShell)Exit Status","text":"$?包含最後一個命令的執行狀態。 如果最後一個命令成功，則會包含 True，如果失敗，則為 False。Write-ErrorCmdlet 會在執行後將設定$?為false，但在呼叫它的函式中，不會將設定$?為false 12345678function Test-WriteError{ Write-Error &quot;Bad&quot; $? # $false}Test-WriteError$? # $true $LASTEXITCODE上次執行之原生程式的結束代碼。 若為原生命令 (可執行檔) ，當$LASTEXITCODE是0時，$?會設定為 True，當$LASTEXITCODE為任何其他值，則設定為 False。","link":"/powershell-exit-status/"},{"title":"(PowerShell)檔案與目錄操作(建立、複製、搬移、刪除)","text":"檢查檔案/目錄是否存在使用Test-Path指令檢查，存在傳回True，不存在傳回False 1234# 檢查檔案是否存在Test-Path -Path &quot;D:\\Logfiles\\xxx.log&quot;# 檢查目錄是否存在Test-Path -Path &quot;D:\\Logfiles&quot; 檢查是路徑是檔案或是目錄1.可使用Test-Path的-FileType參數來判斷，用Leaf檢查是否是檔案，或用Container來檢查是否為目錄 12345678Test-Path -Path &quot;D:\\Logfiles\\xxx.log&quot; -PathType Leaf# TrueTest-Path -Path &quot;D:\\Logfiles\\xxx.log&quot; -PathType Container# FalseTest-Path -Path &quot;D:\\Logfiles&quot; -PathType Leaf# FalseTest-Path -Path &quot;D:\\Logfiles&quot; -PathType Container# True 2.使用System.IO.DirectoryInfo來判斷是否為目錄 1234$(Get-Item &quot;D:\\Logfiles\\xxx.log&quot;) -is [System.IO.DirectoryInfo]# False$(Get-Item &quot;D:\\Logfiles&quot;) -is [System.IO.DirectoryInfo]# True 3.使用PSIsContainer判斷 1234$(Get-Item &quot;D:\\Logfiles\\xxx.log&quot;).PSIsContainer# False$(Get-Item &quot;D:\\Logfiles&quot;).PSIsContainer# True 建立檔案/目錄建立新目錄或一個新的空白檔案，可使用New-Item指令 1234# 建立新目錄New-Item &quot;D:\\LogArchive&quot; -ItemType &quot;Directory&quot;# 建立新空白檔案，像是LINUX系統的touch指令New-Item &quot;D:\\LogArchive\\xxx.bak&quot; -ItemType &quot;File&quot; 複製檔案/目錄複製單一檔案1234# 複製檔案Copy-Item &quot;D:\\Logfiles\\xxx.log&quot; -Destination &quot;D:\\Logfiles\\xxx.bak&quot;# 複製檔案到指定目錄Copy-Item &quot;D:\\Logfiles\\xxx.log&quot; -Destination &quot;D:\\LogArchive&quot; 複製目錄下所有資料複製整個目錄（連同裡面的所有檔案），需加上Recurse參數，若未加上Recurse參數，只會複製Logfiles下面這一層的檔案與子目錄，但子目錄內檔案不會複製 1Copy-Item &quot;D:\\Logfiles\\*&quot; -Destination &quot;D:\\LogArchive&quot; -Recurse 搬移檔案/目錄使用Move-Item指令，-Destination參數使用方法同Copy-Item 1Move-Item &quot;D:\\Logfiles\\xxx.log&quot; -Destination &quot;D:\\LogArchive\\xxx.bak&quot; 刪除檔案/目錄使用Remove-Item指令 1234# 刪除檔案Remove-Item &quot;D:\\LogArchive\\xxx.bak&quot;# 刪除目錄Remove-Item &quot;D:\\LogArchive&quot; 確認路徑是否為UNC路徑","link":"/powershell-file-and-directory-operation/"},{"title":"(PowerShell)New-PSDrive","text":"Syntax1234567891011New-PSDrive [-Name] &lt;String&gt; [-PSProvider] &lt;String&gt; [-Root] &lt;String&gt; [-Description &lt;String&gt;] [-Scope &lt;String&gt;] [-Persist] [-Credential &lt;PSCredential&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] Ex: 建立映射到網路共享的暫存磁碟1234567891011# 建立名為Public的暫存磁碟，映射到\\\\Server01\\PublicNew-PSDrive -Name &quot;Public&quot; -PSProvider &quot;FileSystem&quot; -Root &quot;\\\\Server01\\Public&quot;# 建立暫存磁碟後，可透過Get-Item或Get-ChildItem取得內容, 磁碟名稱後的冒號(:)記得一定要加Get-ChildItem Public:Get-Item Public:# 新增/搬移/複製/刪除暫存磁碟檔案或目錄Move-Item &quot;xxx.txt&quot; -Destination &quot;Public:&quot;Copy-Item &quot;xxx.txt&quot; -Destination &quot;Public:\\AANew-Item &quot;Public:\\LogArchive&quot; -ItemType &quot;Directory&quot;","link":"/powershell-new-psdrive/"},{"title":"(PowerShell)檢查&#x2F;設定TrustedHosts","text":"取得目前TrustedHosts名單1Get-Item WSMan:\\localhost\\Client\\TrustedHosts 設定TrustedHosts 12345678# 設定特定的IPwinrm set winrm/config/client '@{TrustedHosts=&quot;xxx.xxx.xxx.xxx,yyy.yyy.yyy.yyy&quot;}'# 設定allow all *Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value &quot;*&quot; -Force#加入TrustedHosts (Concatenate是append，若沒加Concatenate，會一直覆蓋)Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value &quot;zzz.zzz.zzz&quot; -Concatenate 重啟WinRM Service1Restart-Service WinRM","link":"/powershell-trustedhosts/"},{"title":"(PowerShell)常見輸出訊息的方法","text":"Write-Host直接輸出到終端機畫面 1Write-Host &quot;Hello World&quot; Write-Output將訊息傳遞出來，若無接收者，則輸出到終端機畫面 12345# 輸出到終端機畫面Write-Output &quot;Hello World&quot;# 後有接收者，因此寫入xxx.txtWrite-Output &quot;Hello World&quot; | Out-File -FilePath &quot;D:\\xxx.txt&quot; Write-Warning輸出警告訊息，會搭配$WarningPreference來設定是否輸出訊息，$WarningPreference預設為Continue，因此會輸出訊息後繼續執行 12345# 檢查$WarningPreference狀態$WarningPreference# 輸出至終端機Write-Warning &quot;Hello World&quot; Write-Debug輸出偵錯訊息，會搭配$DebugPreference來設定是否輸出訊息，$DebugPreference預設為SilentlyContinue，因此不會輸出訊息，但會往下執行 12345678# 檢查$DebugPreference狀態$DebugPreference# 若DebugPreference值為SilentlyContinue，則不會輸出訊息且繼續執行Write-Debug &quot;Hello World&quot;# 不管$DebugPreference值為何，強制以DEBUG方式輸出Write-Debug &quot;Hello World&quot; -Debug Write-Error除了輸出訊息到終端機外，還會將錯誤訊息加入到Error Stream(也就是$Error變數)，且不會終止當前動作，繼續往下執行 1Write-Error &quot;Hello World&quot;","link":"/print-output-in-powershell/"},{"title":"加速SSMS&#x2F;Visual Studio啟動速度","text":"捷徑後加 -nosplash","link":"/speed-up-SSMS/"},{"title":"win-acme申請Let&#39;s Encrypt SSL","text":"1. 下載並解壓縮win-acme 至win-acme網站下載檔案，並解壓縮 2. 以系統管理員身分開啟「命令提示字元(CMD)」 3. 輸入N，按[Enter]，開始建立憑證申請 4. win-acme會掃描IIS內站台，並列出站台序號及名稱可依據自己需求，選擇要申請憑證的網域名稱，或直接按{Enter]選擇綁定所有IIS上的網域名稱。(這邊的例子是選擇單一站台，選擇A綁定所有) 5. 選定後，閱讀及同意服務條款 6. 輸入email，若要輸入多個email，用逗號區隔輸入email，按下[Enter]，程式就會自動執行憑證申請、新增憑證到IIS要綁定的站台，以及到期前自動更新的作業。 7. IIS管理員 → 伺服器憑證上面動作完成後，即可在IIS中看到憑證已自動綁定匯入 8. 瀏覽器檢查憑證是否生效","link":"/win-acme-LetsEncryptSSL/"}],"tags":[{"name":"Apache","slug":"Apache","link":"/tags/Apache/"},{"name":"htaccess","slug":"htaccess","link":"/tags/htaccess/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"MSSQL","slug":"MSSQL","link":"/tags/MSSQL/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"HSTS","slug":"HSTS","link":"/tags/HSTS/"},{"name":"PowerShell","slug":"PowerShell","link":"/tags/PowerShell/"},{"name":"SSMS","slug":"SSMS","link":"/tags/SSMS/"},{"name":"IIS","slug":"IIS","link":"/tags/IIS/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"}],"categories":[{"name":"Apache","slug":"Apache","link":"/categories/Apache/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"MSSQL","slug":"MSSQL","link":"/categories/MSSQL/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"PowerShell","slug":"PowerShell","link":"/categories/PowerShell/"},{"name":"IIS","slug":"IIS","link":"/categories/IIS/"}],"pages":[{"title":"","text":"google-site-verification: google0aae38270f8a6163.html","link":"/google0aae38270f8a6163.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}]}